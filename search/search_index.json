{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SIG x UNSW Financial Technology Society's 2022 Algothon. Welcome to the third year of the Algothon - the first student-led algorithmic trading hackathon in Australia! We're making this page available for you to gain access to our Algothon Guidelines, learning resources and technical advice, which will hopefully assist you in the competition. More information regarding the Algothon objectives, schedule and prizes will be made available in the lead-up to our competition start date. Updates Access the Facebook event here . Slides and Resources Workshop 1 (Python) Links Click here for the recording. Click here for the workshop slides. Click here for the workshop codebase. Workshop 2 - Algorithmic Trading Links Due to security constraints, this workshop was NOT recorded. Click here for the workshop slides. Kick-off / Q&A Event Links Due to security constraints, this workshop was NOT recorded. Click here for the slides. A quick overview of the case problem and constraints can be found in these slides. Case Brief The link to the repository is displayed in the header of this site. Please fork/download a copy of the repository. Alternatively, click here to be redirected to Github. Register Now! Register here by: Registrations for individuals have closed. 11:59 PM AEDT 6 July for teams. Submissions Submit your Algothon solution here . More information can be found in the submissions tab. Contact us at events@unswfintech.com with '[2022 Algothon]' preceding your subject line, or message our Facebook page.","title":"Home"},{"location":"#welcome-to-sig-x-unsw-financial-technology-societys-2022-algothon","text":"Welcome to the third year of the Algothon - the first student-led algorithmic trading hackathon in Australia! We're making this page available for you to gain access to our Algothon Guidelines, learning resources and technical advice, which will hopefully assist you in the competition. More information regarding the Algothon objectives, schedule and prizes will be made available in the lead-up to our competition start date.","title":"Welcome to SIG x UNSW Financial Technology Society's 2022 Algothon."},{"location":"#updates","text":"Access the Facebook event here .","title":"Updates"},{"location":"#slides-and-resources","text":"","title":"Slides and Resources"},{"location":"#workshop-1-python-links","text":"Click here for the recording. Click here for the workshop slides. Click here for the workshop codebase.","title":"Workshop 1 (Python) Links"},{"location":"#workshop-2-algorithmic-trading-links","text":"Due to security constraints, this workshop was NOT recorded. Click here for the workshop slides.","title":"Workshop 2 - Algorithmic Trading Links"},{"location":"#kick-off-qa-event-links","text":"Due to security constraints, this workshop was NOT recorded. Click here for the slides. A quick overview of the case problem and constraints can be found in these slides.","title":"Kick-off / Q&amp;A Event Links"},{"location":"#case-brief","text":"The link to the repository is displayed in the header of this site. Please fork/download a copy of the repository. Alternatively, click here to be redirected to Github.","title":"Case Brief"},{"location":"#register-now","text":"Register here by: Registrations for individuals have closed. 11:59 PM AEDT 6 July for teams.","title":"Register Now!"},{"location":"#submissions","text":"Submit your Algothon solution here . More information can be found in the submissions tab. Contact us at events@unswfintech.com with '[2022 Algothon]' preceding your subject line, or message our Facebook page.","title":"Submissions"},{"location":"1basicInfo/","text":"Welcome + Basic Info Welcome to FinTechSoc's 2021 Algorithmic Trading Hackathon, in collaboration with SIG! This competition will run over two and a half weeks, and is open to all university students. In teams of 3 or 4, students will need to submit their algorithmic model and strategic reasoning in response to price data. If successful in preliminary rounds, teams will proceed to finals Judging and present to traders from SIG. For any questions leading up to or throughout the duration of this competition, please email us at events@unswfintech.com . Make sure to also check out our Facebook event page for more information. Registration If you have not yet registered, please do so here . Individual registrations close on 5:00PM AEDT 5 July , and team registrations close 11:59PM AEDT 6 July . Slides and Resources Workshop 1 (Python) Links Click here for the recording. Click here for the workshop slides. Click here for the workshop codebase. Workshop 2 - Algorithmic Trading Links Click here for the workshop slides. Kick-off / Q&A Event Links Click here for the slides. \ud83d\udc4c Note: To contact us, email us at events@unswfintech.com with '[2022 Algothon]' preceding your subject line, or message our Facebook page.","title":"Welcome + Basic Info"},{"location":"1basicInfo/#welcome-basic-info","text":"Welcome to FinTechSoc's 2021 Algorithmic Trading Hackathon, in collaboration with SIG! This competition will run over two and a half weeks, and is open to all university students. In teams of 3 or 4, students will need to submit their algorithmic model and strategic reasoning in response to price data. If successful in preliminary rounds, teams will proceed to finals Judging and present to traders from SIG. For any questions leading up to or throughout the duration of this competition, please email us at events@unswfintech.com . Make sure to also check out our Facebook event page for more information.","title":"Welcome + Basic Info"},{"location":"1basicInfo/#registration","text":"If you have not yet registered, please do so here . Individual registrations close on 5:00PM AEDT 5 July , and team registrations close 11:59PM AEDT 6 July .","title":"Registration"},{"location":"1basicInfo/#slides-and-resources","text":"","title":"Slides and Resources"},{"location":"1basicInfo/#workshop-1-python-links","text":"Click here for the recording. Click here for the workshop slides. Click here for the workshop codebase.","title":"Workshop 1 (Python) Links"},{"location":"1basicInfo/#workshop-2-algorithmic-trading-links","text":"Click here for the workshop slides.","title":"Workshop 2 - Algorithmic Trading Links"},{"location":"1basicInfo/#kick-off-qa-event-links","text":"Click here for the slides. \ud83d\udc4c Note: To contact us, email us at events@unswfintech.com with '[2022 Algothon]' preceding your subject line, or message our Facebook page.","title":"Kick-off / Q&amp;A Event Links"},{"location":"2guidelines/","text":"Algothon Guidelines + Brief Preliminary round submissions are due 9:00AM AEST 14 July. 5 teams will proceed to the final round, held at 6:00PM AEST 21 July and judged by SIG traders in office. We recommend that each team have at least one member with programming experience in Python, as well as financial knowledge. Impressive submissions will be expected to involve reasonably advanced data analysis and implementation of reasonably sophisticated trading strategies. Objective Develop a trading strategy algorithm to perform optimally given certain metrics. How to Get Started Assess provided price data from our simulated trading universe. Build a predictive model. Back-test the predictive model across given price data. Evaluate your algorithmic strategy. Hope for the best (just kidding!). Consider factors such as optimisation and risk analysis. Topics that may be explored include: Optimising for trade frequency. Projections for worst-case scenarios and methods to mitigate this. Considering risk factors, and techniques to minimise risk. For more information, make sure to take a look at our learning resources and technical advice page! Case Brief Task Implement a function getMyPosition() which Takes as input a NumPy array of the shape nInst x nt . nInst = 100 is the number of instruments. nt is the number of days for which the prices have been provided. Returns a vector of desired positions. i.e. This function returns a NumPy vector of integers. This integer denotes your daily position per instrument in the universe. With 100 instruments, we can expect this function to return 100 integers each time it is called. Data All required data has been generated by us, and is available here Work in progress . We'd highly recommend cloning this repo to use a base for your algorithm development, and to make it easier for submission. Our simulated trading universe consists of several years of daily price data, spanning 100 instruments. The instruments are numbered from 0 to 99, and days go chronologically from 0 onwards such that p[inst, t] indicates the price of the instrument inst on day t . The price data file contains a NumPy array of the shape nInst x nt. nInst = number of instruments, nt = number of days. In the preliminary round, teams will be provided the first 250 days of price data to be used as training data . This can be found in prices250.txt. Preliminary round algorithms will be assessed on data from days 251 - 500. Successful teams will then receive price data and results from preliminary evaluation. Final round algorithms will be assessed on remaining future price data. The Algorithm Format Algorithms must be contained in a file titled [teamName].py. This file must contain a function getMyPosition(). getMyPosition() must take in the daily price data, and output a vector of integer positions - the numbers of shares desired for each stock as the total final position after the last day. getMyPosition() must be in the global scope of the file called [teamName].py and have the appropriate signature. The function will be called once a day, with the entire price history up to and including that day. For example, on day 240, your function should take as input an array of 100 inst x 240 days. When getMyPosition() is called, we will trade position differences from the previous position at the most recent price, buying or selling. Consider the case where your last position was +30, and the new stock price is $20. If your new position is +100, eval will register this as buying 70 extra shares at $20 a share. If your new position is -200, eval will sell 230 shares also at $20 a share. Accepted Packages To ensure that code runs smoothly on the servers used for marking, we advise the following: Use only standard packages and their respective versions from the Anaconda library. The best way to do this is to simply download Anaconda... Where necessary, packages that are not included as part of Anaconda, or version numbers that are greater than those provided in Anaconda need to be declared in the submission form in the relevant section. We will attempt to import and run through all non-standard packages if declared. However, in the case that your code still does not run, your team will be disqualified . Similarly, if your submission does not declare a non-standard package or provide a brief description of its use, it will also be disqualified . Considerations A commission rate of 25 bps (0.0025) can be assumed, meaning you will be charged commission equating 0.0025 * totalDollarVolumeTraded . This will be deducted from your PL. Positions can be long or short (i.e. the integer positions can be either positive or negative). Teams are limited to a $10k position limit per stock, positive or negative. The $10k limit cannot be breached at the time of the trade. This position limit may technically be exceeded in the case that exactly $10k worth of a stock is bought, and stock goes up the next day - this is fine. However, given this occurs, the position must be slightly reduced to be no greater than $10k by the new day's price. Note: eval.py contains a function to clip positions to a maximum of $10k. This means that if the price is $10 and the algorithm returns a position of 1500 shares, eval.py will assume a request of 1000 shares. Assessment Benchmarks The program we will use to evaluate your algorithm is provided in eval.py Metrics used to quantitatively assess your submission will include: PL (daily and mean), Return (net PL / dollarVolumeTraded ), Sharpe Ratio, and Trading volume. Your algorithms will be assessed against unseen, future price data of the same 100 instruments within the provided simulated trading universe. We expect algorithms to have a maximum runtime of ~10min. Submission Submission details can be found on our Submission page. Ensure that all code submitted is tested against eval.py This will be the test used to evaluate the performance of your algorithm. Judging criteria can be found here.","title":"Algothon Guidelines + Brief"},{"location":"2guidelines/#algothon-guidelines-brief","text":"Preliminary round submissions are due 9:00AM AEST 14 July. 5 teams will proceed to the final round, held at 6:00PM AEST 21 July and judged by SIG traders in office. We recommend that each team have at least one member with programming experience in Python, as well as financial knowledge. Impressive submissions will be expected to involve reasonably advanced data analysis and implementation of reasonably sophisticated trading strategies.","title":"Algothon Guidelines + Brief"},{"location":"2guidelines/#objective","text":"Develop a trading strategy algorithm to perform optimally given certain metrics.","title":"Objective"},{"location":"2guidelines/#how-to-get-started","text":"Assess provided price data from our simulated trading universe. Build a predictive model. Back-test the predictive model across given price data. Evaluate your algorithmic strategy. Hope for the best (just kidding!). Consider factors such as optimisation and risk analysis. Topics that may be explored include: Optimising for trade frequency. Projections for worst-case scenarios and methods to mitigate this. Considering risk factors, and techniques to minimise risk. For more information, make sure to take a look at our learning resources and technical advice page!","title":"How to Get Started"},{"location":"2guidelines/#case-brief","text":"","title":"Case Brief"},{"location":"2guidelines/#task","text":"Implement a function getMyPosition() which Takes as input a NumPy array of the shape nInst x nt . nInst = 100 is the number of instruments. nt is the number of days for which the prices have been provided. Returns a vector of desired positions. i.e. This function returns a NumPy vector of integers. This integer denotes your daily position per instrument in the universe. With 100 instruments, we can expect this function to return 100 integers each time it is called.","title":"Task"},{"location":"2guidelines/#data","text":"All required data has been generated by us, and is available here Work in progress . We'd highly recommend cloning this repo to use a base for your algorithm development, and to make it easier for submission. Our simulated trading universe consists of several years of daily price data, spanning 100 instruments. The instruments are numbered from 0 to 99, and days go chronologically from 0 onwards such that p[inst, t] indicates the price of the instrument inst on day t . The price data file contains a NumPy array of the shape nInst x nt. nInst = number of instruments, nt = number of days. In the preliminary round, teams will be provided the first 250 days of price data to be used as training data . This can be found in prices250.txt. Preliminary round algorithms will be assessed on data from days 251 - 500. Successful teams will then receive price data and results from preliminary evaluation. Final round algorithms will be assessed on remaining future price data.","title":"Data"},{"location":"2guidelines/#the-algorithm","text":"","title":"The Algorithm"},{"location":"2guidelines/#format","text":"Algorithms must be contained in a file titled [teamName].py. This file must contain a function getMyPosition(). getMyPosition() must take in the daily price data, and output a vector of integer positions - the numbers of shares desired for each stock as the total final position after the last day. getMyPosition() must be in the global scope of the file called [teamName].py and have the appropriate signature. The function will be called once a day, with the entire price history up to and including that day. For example, on day 240, your function should take as input an array of 100 inst x 240 days. When getMyPosition() is called, we will trade position differences from the previous position at the most recent price, buying or selling. Consider the case where your last position was +30, and the new stock price is $20. If your new position is +100, eval will register this as buying 70 extra shares at $20 a share. If your new position is -200, eval will sell 230 shares also at $20 a share.","title":"Format"},{"location":"2guidelines/#accepted-packages","text":"To ensure that code runs smoothly on the servers used for marking, we advise the following: Use only standard packages and their respective versions from the Anaconda library. The best way to do this is to simply download Anaconda... Where necessary, packages that are not included as part of Anaconda, or version numbers that are greater than those provided in Anaconda need to be declared in the submission form in the relevant section. We will attempt to import and run through all non-standard packages if declared. However, in the case that your code still does not run, your team will be disqualified . Similarly, if your submission does not declare a non-standard package or provide a brief description of its use, it will also be disqualified .","title":"Accepted Packages"},{"location":"2guidelines/#considerations","text":"A commission rate of 25 bps (0.0025) can be assumed, meaning you will be charged commission equating 0.0025 * totalDollarVolumeTraded . This will be deducted from your PL. Positions can be long or short (i.e. the integer positions can be either positive or negative). Teams are limited to a $10k position limit per stock, positive or negative. The $10k limit cannot be breached at the time of the trade. This position limit may technically be exceeded in the case that exactly $10k worth of a stock is bought, and stock goes up the next day - this is fine. However, given this occurs, the position must be slightly reduced to be no greater than $10k by the new day's price. Note: eval.py contains a function to clip positions to a maximum of $10k. This means that if the price is $10 and the algorithm returns a position of 1500 shares, eval.py will assume a request of 1000 shares.","title":"Considerations"},{"location":"2guidelines/#assessment-benchmarks","text":"The program we will use to evaluate your algorithm is provided in eval.py Metrics used to quantitatively assess your submission will include: PL (daily and mean), Return (net PL / dollarVolumeTraded ), Sharpe Ratio, and Trading volume. Your algorithms will be assessed against unseen, future price data of the same 100 instruments within the provided simulated trading universe. We expect algorithms to have a maximum runtime of ~10min.","title":"Assessment Benchmarks"},{"location":"2guidelines/#submission","text":"Submission details can be found on our Submission page. Ensure that all code submitted is tested against eval.py This will be the test used to evaluate the performance of your algorithm. Judging criteria can be found here.","title":"Submission"},{"location":"3schedule/","text":"Schedule \ud83d\udc4c Note: For emergencies, please email events@unswfintech.com with the subject title \"[ALGOTHON - Urgent] Subject\". Links will be updated as the Algothon progresses. Pre-Competition 23rd June, 5:00pm - Workshop 1 - Python Fundamentals for Algorithmic Trading 30th June, 5:00pm - Workshop 2 - Algorithmic Trading Applications and Sample Strategies Competition: Preliminaries 4th July, 5:00pm - Kick-off/Q&A Event 14th July, 9:00am - Preliminaries submissions close Competition: Heats and Finals 14th July, 9:00am - Heats marking begins 18th July - Finalists emailed, heats results revealed 21st July - Finals (held in office)","title":"Schedule"},{"location":"3schedule/#schedule","text":"\ud83d\udc4c Note: For emergencies, please email events@unswfintech.com with the subject title \"[ALGOTHON - Urgent] Subject\". Links will be updated as the Algothon progresses.","title":"Schedule"},{"location":"3schedule/#pre-competition","text":"23rd June, 5:00pm - Workshop 1 - Python Fundamentals for Algorithmic Trading 30th June, 5:00pm - Workshop 2 - Algorithmic Trading Applications and Sample Strategies","title":"Pre-Competition"},{"location":"3schedule/#competition-preliminaries","text":"4th July, 5:00pm - Kick-off/Q&A Event 14th July, 9:00am - Preliminaries submissions close","title":"Competition: Preliminaries"},{"location":"3schedule/#competition-heats-and-finals","text":"14th July, 9:00am - Heats marking begins 18th July - Finalists emailed, heats results revealed 21st July - Finals (held in office)","title":"Competition: Heats and Finals"},{"location":"4resources/","text":"Algothon101 + Resources IMPORTANT The following materials serve as supplementary resources to our Algothon workshops. Please refer to the workshop recordings to understand key skills for the competition. Please note that the workshop will not provide all required knowledge for the competition. Additional research will be required, and below provides a great start!! Workshop Resources Workshop 1 (Python) Links Click here for the recording. Click here for the workshop slides. Click here for the workshop codebase. Workshop 2 - Algorithmic Trading Links Click here for the workshop slides. Kick-off / Q&A Event Links Click here for the slides. Guidance The following is provided only as guidance, to assist with direction in completing this challenge. You can choose to use any, none or all of it, given that your submission fall within the specified criteria. We would like to see different models developed in the competition, and any projects that address the investment themes will have a fair chance at winning! There are almost infinite free resources online regarding both the financials and technicals required in algorithmic trading, but we've compiled a bunch we think are useful! Basics Beginner's Guide to Quantitative Trading How to Identify Algorithmic Trading Strategies Quantopian: https://gist.github.com/ih2502mk/50d8f7feb614c8676383431b056f4291 Quantopian has a bunch of lectures catering to various skill levels, from novices with no programming ability (intro to Python, NumPy, Pandas), to those who want to learn advanced linear regression, portfolio optimisation, beta hedging etc. Learndatasci: https://www.learndatasci.com/tutorials/ This site has a good range of resources related to quantitative analysis! There are some articles around dealing with NumPy and Pandas, as well as a good introduction to algorithmic trading. It even includes a detailed look at a moving-average strategy, with sample code! Trading Strategies and Analytics YouTube Series: Big Data Analytics & Algorithmic Stock Trading (Backtesting) Machine Learning and Pattern Recognition for Algorithmic Stock Trading These playlists are pretty extensive and cover a range of topics including basic instructions on how to access and manage stock data, calculating moving averages in Python etc. Backtesting Algorithmic Trading Strategies: Part 1 | Part 2 Backtesting a Mean Reversion Trading Strategy Stock Price Prediction with Python and Basic ML Basic Tensorflow (Regression Problems) Technical Advice Starting Out For the Algothon, participants must have Python installed (v3.6+). We highly recommend using standard popular analytics/plotting libraries such as NumPy, Pandas and Matplotlib. This can be done using the Anaconda package manager, which supports Windows, Linux and Mac. Other libraries such as TensorFlow and SciPy are also supported by Anaconda. Install Anaconda here . Data Sources All data will be provided by FinTechSoc. The trading universe consists of simulated daily price data of 100 instruments. Preliminary round data will be provided at case release (7:00PM AEST 1 July). Note that the dataset used for judging will not be the same as the data provided to you. Finalists will be provided the data used to assess preliminary rounds, and will have the opportunity to amend their algorithm. The dataset used to evaluate teams during final presentations will again be unseen data. Heavy Computations If you intend to perform large-scale computations, we would recommend setting up cloud computing resources to scale the training of your models. Getting an AWS Educate account will give you access to AWS credits without entering credit card details. Note that this should not be necessary given the volume of data provided by FinTechSoc. Join AWS Educate here . Access documentation of various AWS products and tools here . Find examples for using Amazon SageMaker with the Python SDK here . SageMaker can be used to perform various machine learning tasks.","title":"Algothon101 + Resources"},{"location":"4resources/#algothon101-resources","text":"","title":"Algothon101 + Resources"},{"location":"4resources/#important","text":"The following materials serve as supplementary resources to our Algothon workshops. Please refer to the workshop recordings to understand key skills for the competition. Please note that the workshop will not provide all required knowledge for the competition. Additional research will be required, and below provides a great start!!","title":"IMPORTANT"},{"location":"4resources/#workshop-resources","text":"","title":"Workshop Resources"},{"location":"4resources/#workshop-1-python-links","text":"Click here for the recording. Click here for the workshop slides. Click here for the workshop codebase.","title":"Workshop 1 (Python) Links"},{"location":"4resources/#workshop-2-algorithmic-trading-links","text":"Click here for the workshop slides.","title":"Workshop 2 - Algorithmic Trading Links"},{"location":"4resources/#kick-off-qa-event-links","text":"Click here for the slides.","title":"Kick-off / Q&amp;A Event Links"},{"location":"4resources/#guidance","text":"The following is provided only as guidance, to assist with direction in completing this challenge. You can choose to use any, none or all of it, given that your submission fall within the specified criteria. We would like to see different models developed in the competition, and any projects that address the investment themes will have a fair chance at winning! There are almost infinite free resources online regarding both the financials and technicals required in algorithmic trading, but we've compiled a bunch we think are useful! Basics Beginner's Guide to Quantitative Trading How to Identify Algorithmic Trading Strategies Quantopian: https://gist.github.com/ih2502mk/50d8f7feb614c8676383431b056f4291 Quantopian has a bunch of lectures catering to various skill levels, from novices with no programming ability (intro to Python, NumPy, Pandas), to those who want to learn advanced linear regression, portfolio optimisation, beta hedging etc. Learndatasci: https://www.learndatasci.com/tutorials/ This site has a good range of resources related to quantitative analysis! There are some articles around dealing with NumPy and Pandas, as well as a good introduction to algorithmic trading. It even includes a detailed look at a moving-average strategy, with sample code! Trading Strategies and Analytics YouTube Series: Big Data Analytics & Algorithmic Stock Trading (Backtesting) Machine Learning and Pattern Recognition for Algorithmic Stock Trading These playlists are pretty extensive and cover a range of topics including basic instructions on how to access and manage stock data, calculating moving averages in Python etc. Backtesting Algorithmic Trading Strategies: Part 1 | Part 2 Backtesting a Mean Reversion Trading Strategy Stock Price Prediction with Python and Basic ML Basic Tensorflow (Regression Problems)","title":"Guidance"},{"location":"4resources/#technical-advice","text":"","title":"Technical Advice"},{"location":"4resources/#starting-out","text":"For the Algothon, participants must have Python installed (v3.6+). We highly recommend using standard popular analytics/plotting libraries such as NumPy, Pandas and Matplotlib. This can be done using the Anaconda package manager, which supports Windows, Linux and Mac. Other libraries such as TensorFlow and SciPy are also supported by Anaconda. Install Anaconda here .","title":"Starting Out"},{"location":"4resources/#data-sources","text":"All data will be provided by FinTechSoc. The trading universe consists of simulated daily price data of 100 instruments. Preliminary round data will be provided at case release (7:00PM AEST 1 July). Note that the dataset used for judging will not be the same as the data provided to you. Finalists will be provided the data used to assess preliminary rounds, and will have the opportunity to amend their algorithm. The dataset used to evaluate teams during final presentations will again be unseen data.","title":"Data Sources"},{"location":"4resources/#heavy-computations","text":"If you intend to perform large-scale computations, we would recommend setting up cloud computing resources to scale the training of your models. Getting an AWS Educate account will give you access to AWS credits without entering credit card details. Note that this should not be necessary given the volume of data provided by FinTechSoc. Join AWS Educate here . Access documentation of various AWS products and tools here . Find examples for using Amazon SageMaker with the Python SDK here . SageMaker can be used to perform various machine learning tasks.","title":"Heavy Computations"},{"location":"5submission/","text":"Submission You can submit your GitHub repo here . If your team is successful as a finalist, you will receive a separate submission link for your final submission. Preliminary Your submission must include: Team name. Team captain name and email. Link to public GitHub repo, containing your source code in a file titled [team_name].py. This file will contain your algorithm, containing function getMyPosition(). Your function must take in the data provided in prices.csv. Your function must output a vector of integers, each denoting your daily position. 1 minute video, briefly explaining your algorithm and what strategies you employed. Team members are not required to be in the video - voiceovers will suffice. Any other supporting documentation and information about your non-standard libraries. Please note that requirements in the submission form will precede the above information. At case launch, we will provide our autotesting file, eval.py . Ensure you run your program against the test before submission. We expect algorithms to have a maximum runtime of ~10min. Note that your algorithm will be assessed on future, unseen price data from the same trading universe. Finals If your team is successful in progressing to the final round, you will be provided the data used to evaluate your algorithm in the preliminary rounds. Please make a submission with the new submission form. Note that final round presentations will consist of a 5 minute presentation , alongside 4 minutes of Q&A. Final submissions will be also quantitatively assessed, with test results provided to judges prior to team presentation.","title":"Submission"},{"location":"5submission/#submission","text":"You can submit your GitHub repo here . If your team is successful as a finalist, you will receive a separate submission link for your final submission.","title":"Submission"},{"location":"5submission/#preliminary","text":"Your submission must include: Team name. Team captain name and email. Link to public GitHub repo, containing your source code in a file titled [team_name].py. This file will contain your algorithm, containing function getMyPosition(). Your function must take in the data provided in prices.csv. Your function must output a vector of integers, each denoting your daily position. 1 minute video, briefly explaining your algorithm and what strategies you employed. Team members are not required to be in the video - voiceovers will suffice. Any other supporting documentation and information about your non-standard libraries. Please note that requirements in the submission form will precede the above information. At case launch, we will provide our autotesting file, eval.py . Ensure you run your program against the test before submission. We expect algorithms to have a maximum runtime of ~10min. Note that your algorithm will be assessed on future, unseen price data from the same trading universe.","title":"Preliminary"},{"location":"5submission/#finals","text":"If your team is successful in progressing to the final round, you will be provided the data used to evaluate your algorithm in the preliminary rounds. Please make a submission with the new submission form. Note that final round presentations will consist of a 5 minute presentation , alongside 4 minutes of Q&A. Final submissions will be also quantitatively assessed, with test results provided to judges prior to team presentation.","title":"Finals"},{"location":"6criteria/","text":"Judging Criteria Technical: 85% (Preliminary), 75% (Finals) Your algorithms will be assessed based on the quality of overall performance , as well as the creativity and originality of implementation. The metrics used will include: Profit and loss, Total portfolio return, and Sharpe ratio. The algorithm will be evaluated on the basis of what we believe is achievable with the given dataset. Prioritising one metric over all others is inadvisable. However, feel free to create an algorithm that preferences achieving optimal results in one or two metrics as long as there is valid reasoning behind this (e.g. minimise risk at the expense of lower return). Presentation: 15% (Preliminary), 25% (Finals) Your presentation will be assessed on whether or not there is evidence of: Clear and engaging delivery and presentation style. Effective communication and convincing presentation. Effective use of presentation tool, if used. Well-structured presentation that adheres to the provided time limit. High technical maturity and understanding of problem and solution. Strong team cohesion, with even presentation distribution (finals only). In the finals, Q&A will constitute 10/25 of the presentation scoring points.","title":"Judging Criteria"},{"location":"6criteria/#judging-criteria","text":"","title":"Judging Criteria"},{"location":"6criteria/#technical-85-preliminary-75-finals","text":"Your algorithms will be assessed based on the quality of overall performance , as well as the creativity and originality of implementation. The metrics used will include: Profit and loss, Total portfolio return, and Sharpe ratio. The algorithm will be evaluated on the basis of what we believe is achievable with the given dataset. Prioritising one metric over all others is inadvisable. However, feel free to create an algorithm that preferences achieving optimal results in one or two metrics as long as there is valid reasoning behind this (e.g. minimise risk at the expense of lower return).","title":"Technical: 85% (Preliminary), 75% (Finals)"},{"location":"6criteria/#presentation-15-preliminary-25-finals","text":"Your presentation will be assessed on whether or not there is evidence of: Clear and engaging delivery and presentation style. Effective communication and convincing presentation. Effective use of presentation tool, if used. Well-structured presentation that adheres to the provided time limit. High technical maturity and understanding of problem and solution. Strong team cohesion, with even presentation distribution (finals only). In the finals, Q&A will constitute 10/25 of the presentation scoring points.","title":"Presentation: 15% (Preliminary), 25% (Finals)"},{"location":"7prizes/","text":"Prizes Participate in the Algothon to receive a share of a 1.8k prize pool! \ud83e\udd47 1st Place: $250 prepaid Eftpos gift card per team member. \ud83e\udd48 2nd Place: $150 prepaid Eftpos gift card per team member. \ud83e\udd49 3rd Place: $50 prepaid Eftpos gift card per team member. Further prizes / perks to be announced after event launch (including networking and interview opportunities, and SIG merch!) \ud83c\udfc6\u2615","title":"Prizes"},{"location":"7prizes/#prizes","text":"Participate in the Algothon to receive a share of a 1.8k prize pool! \ud83e\udd47 1st Place: $250 prepaid Eftpos gift card per team member. \ud83e\udd48 2nd Place: $150 prepaid Eftpos gift card per team member. \ud83e\udd49 3rd Place: $50 prepaid Eftpos gift card per team member. Further prizes / perks to be announced after event launch (including networking and interview opportunities, and SIG merch!) \ud83c\udfc6\u2615","title":"Prizes"},{"location":"8faq/","text":"FAQ What is FinTechSoc Algothon? Algothon is short for an algorithmic trading hackathon , consisting a fortnight of learning, designing and building data-driven trading algorithms using modelling and quant techniques. Do I need to be studying at UNSW? No, any current students at an Australian university are eligible to participate. Do I need to be Australian? No, international students are very welcome to participate, as long as they are a current student at an Australian university. Do I need a pre-organised team to enter? No, both individuals and teams are able to register. Individuals will be placed into teams and contacted prior to the competition. How large can our teams be? Teams must consist of 3-4 students. Is a finance or coding background required? While basic coding ability and financial knowledge will be advantageous in implementing your strategies, neither are necessary. Note, however, that many of our resources assume at least minimal programming ability. We recommend at least one member of your team be proficient in a coding language such as Python. How can I prepare for the algothon? Please look out for our Algothon workshops and their respective recordings. Additionally, you may need to perform some additional research, and use some supplementary learning resoucres. We compiled some in the resources section!. Work in progress Where will the event be held? The 2021 FinTechSoc Algothon will be held online. Pending COVID restrictions, Algothon Finals may be held in-person at SIG's Barangaroo office in Sydney. How long do we have for our presentations? Preliminary round submission details can be found here , and will consist of code submission to GitHub, as well as a 1 minute video explaining your algorithm. Finalist presentations will consist of a 5 minute presentation, followed by a 4 minute Q&A. How will our submissions be assessed? Judging criteria can be found here. For any other general inquiries, please email events@unswfintech.com with '[2022 Algothon - General Query]' preceding your subject line, or message our Facebook page., or message our Facebook page .","title":"FAQ"},{"location":"8faq/#faq","text":"","title":"FAQ"},{"location":"8faq/#what-is-fintechsoc-algothon","text":"Algothon is short for an algorithmic trading hackathon , consisting a fortnight of learning, designing and building data-driven trading algorithms using modelling and quant techniques.","title":"What is FinTechSoc Algothon?"},{"location":"8faq/#do-i-need-to-be-studying-at-unsw","text":"No, any current students at an Australian university are eligible to participate.","title":"Do I need to be studying at UNSW?"},{"location":"8faq/#do-i-need-to-be-australian","text":"No, international students are very welcome to participate, as long as they are a current student at an Australian university.","title":"Do I need to be Australian?"},{"location":"8faq/#do-i-need-a-pre-organised-team-to-enter","text":"No, both individuals and teams are able to register. Individuals will be placed into teams and contacted prior to the competition.","title":"Do I need a pre-organised team to enter?"},{"location":"8faq/#how-large-can-our-teams-be","text":"Teams must consist of 3-4 students.","title":"How large can our teams be?"},{"location":"8faq/#is-a-finance-or-coding-background-required","text":"While basic coding ability and financial knowledge will be advantageous in implementing your strategies, neither are necessary. Note, however, that many of our resources assume at least minimal programming ability. We recommend at least one member of your team be proficient in a coding language such as Python.","title":"Is a finance or coding background required?"},{"location":"8faq/#how-can-i-prepare-for-the-algothon","text":"Please look out for our Algothon workshops and their respective recordings. Additionally, you may need to perform some additional research, and use some supplementary learning resoucres. We compiled some in the resources section!. Work in progress","title":"How can I prepare for the algothon?"},{"location":"8faq/#where-will-the-event-be-held","text":"The 2021 FinTechSoc Algothon will be held online. Pending COVID restrictions, Algothon Finals may be held in-person at SIG's Barangaroo office in Sydney.","title":"Where will the event be held?"},{"location":"8faq/#how-long-do-we-have-for-our-presentations","text":"Preliminary round submission details can be found here , and will consist of code submission to GitHub, as well as a 1 minute video explaining your algorithm. Finalist presentations will consist of a 5 minute presentation, followed by a 4 minute Q&A.","title":"How long do we have for our presentations?"},{"location":"8faq/#how-will-our-submissions-be-assessed","text":"Judging criteria can be found here. For any other general inquiries, please email events@unswfintech.com with '[2022 Algothon - General Query]' preceding your subject line, or message our Facebook page., or message our Facebook page .","title":"How will our submissions be assessed?"}]}